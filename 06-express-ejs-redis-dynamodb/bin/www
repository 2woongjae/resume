#!/usr/bin/env node

/**
 * Module dependencies.
 */

var sendMail = require('../vtouch/sns');

var app = require('../app');
var debug = require('debug')('lotte:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/*
*/
var socket_se = null;
var socket_v = null;
var socket_web = null;

var io = require('socket.io')(server);
io.on('connection', function (socket) {

  if (socket.handshake.query.type === 'LOTTESE') {

    socket_se = socket;

    sendState();

    sendMail('LOTTE-SE connect', '롯데시네마 SE 시스템이 인터넷에 연결되었습니다.');

    socket_se.on('disconnect', function() {

      socket_se = null;

      sendState();

      sendMail('LOTTE-SE disconnect', '롯데시네마 SE 시스템이 인터넷에서 연결 해제되었습니다.');

    });

  } else if (socket.handshake.query.type === 'LOTTEV') {

    socket_v = socket;

    sendState();

    sendMail('LOTTE-V connect', '롯데시네마 V 시스템이 인터넷에 연결되었습니다.');

    socket_v.on('disconnect', function() {

      socket_v = null;

      sendState();

      sendMail('LOTTE-V disconnect', '롯데시네마 V 시스템이 인터넷에서 연결 해제되었습니다.');

    });

  } else {

    socket_web = socket;

    sendState();

    socket_web.on('disconnect', function() {

      socket_web = null;

    });

    socket_web.on('shutdown', function(data) {

      if (data.system === 'se') {

        if (socket_se !== null) {

          socket_se.emit('shutdown');

          sendMail('LOTTE-SE reboot', '롯데시네마 SE 시스템 리부트');

        }

      } else if (data.system === 'v') {

        if (socket_v !== null) {

          socket_v.emit('shutdown');

          sendMail('LOTTE-V reboot', '롯데시네마 V 시스템 리부트');

        }

      }

    });

  }  

});

var sendState = function() {

  var se = (socket_se !== null) ? true : false;
  var v = (socket_v !== null) ? true : false;

  if (socket_web !== null) socket_web.emit('state', {se: se, v: v});

};

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
